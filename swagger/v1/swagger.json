{
  "swagger": "2.0",
  "info": {
    "title": "API V1",
    "version": "v1"
  },
  "paths": {
    "/api/v1/epicenters/{epicenter_type}/{epicenter_id}/events": {
      "get": {
        "summary": "Retrieves list of epicenter events",
        "tags": [
          "events"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start date for events to be retrieved"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end date for events to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "events retrieved"
          }
        }
      },
      "post": {
        "summary": "Creates an epicenter event",
        "tags": [
          "events"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "event",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "decription": "Event ID"
                },
                "slug": {
                  "type": "string",
                  "decription": "unique url slug for event page"
                },
                "name": {
                  "type": "string",
                  "description": "Event name"
                },
                "data": {
                  "type": "object",
                  "description": "Event data"
                },
                "caretaker_id": {
                  "type": "integer",
                  "description": "ID of events caretaker (always a user)"
                },
                "owner_id": {
                  "type": "integer"
                },
                "owner_type": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "caretaker_id",
                "slug"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "event created"
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/api/v1/epicenters/{epicenter_type}/{epicenter_id}/events/{event_id}": {
      "put": {
        "summary": "Updates an epicenter event by ID or SLUG",
        "tags": [
          "events"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "event",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "decription": "Event ID"
                },
                "slug": {
                  "type": "string",
                  "decription": "unique url slug for event page"
                },
                "name": {
                  "type": "string",
                  "description": "Event name"
                },
                "data": {
                  "type": "object",
                  "description": "Event data"
                },
                "caretaker_id": {
                  "type": "integer",
                  "description": "ID of events caretaker (always a user)"
                },
                "owner_id": {
                  "type": "integer"
                },
                "owner_type": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "caretaker_id",
                "slug"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "event updated"
          }
        }
      },
      "get": {
        "summary": "Retrieves an epicenter event by ID or SLUG",
        "tags": [
          "events"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "event found",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "decription": "Event ID"
                },
                "slug": {
                  "type": "string",
                  "decription": "unique url slug for event page"
                },
                "name": {
                  "type": "string",
                  "description": "Event name"
                },
                "data": {
                  "type": "object",
                  "description": "Event data"
                },
                "caretaker_id": {
                  "type": "integer",
                  "description": "ID of events caretaker (always a user)"
                },
                "owner_id": {
                  "type": "integer"
                },
                "owner_type": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "event not found"
          }
        }
      }
    },
    "/api/v1/fruits": {
      "get": {
        "summary": "Retrieves list of fruits",
        "tags": [
          "fruits"
        ],
        "responses": {
          "200": {
            "description": "fruits retrieved"
          }
        }
      },
      "post": {
        "summary": "Creates a fruit",
        "tags": [
          "fruits"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fruit",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "decription": "ID of fruit"
                },
                "name": {
                  "type": "string",
                  "description": "Name of fruit"
                },
                "owner_id": {
                  "type": "integer",
                  "description": "Owner id of fruit"
                },
                "owner_type": {
                  "type": "integer",
                  "description": "Owner type of fruit, e.g. Movement, Tribe, User"
                },
                "monthly_yield": {
                  "type": "float",
                  "description": "Yield of fruits per month"
                },
                "monthly_decay": {
                  "type": "float",
                  "description": "Rate of decay per month"
                }
              },
              "required": [
                "name",
                "owner_id",
                "owner_type",
                "monthly_decay"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "fruit created"
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/api/v1/fruits/{id}": {
      "put": {
        "summary": "Updates a fruit by ID",
        "tags": [
          "fruits"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "fruit",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "decription": "ID of fruit"
                },
                "name": {
                  "type": "string",
                  "description": "Name of fruit"
                },
                "owner_id": {
                  "type": "integer",
                  "description": "Owner id of fruit"
                },
                "owner_type": {
                  "type": "integer",
                  "description": "Owner type of fruit, e.g. Movement, Tribe, User"
                },
                "monthly_yield": {
                  "type": "float",
                  "description": "Yield of fruits per month"
                },
                "monthly_decay": {
                  "type": "float",
                  "description": "Rate of decay per month"
                }
              },
              "required": [
                "name",
                "owner_id",
                "owner_type"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fruit updated"
          }
        }
      },
      "get": {
        "summary": "Retrieves a fruit by ID",
        "tags": [
          "fruits"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "fruit not found",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "decription": "ID of fruit"
                },
                "name": {
                  "type": "string",
                  "description": "Name of fruit"
                },
                "owner_id": {
                  "type": "integer",
                  "description": "Owner id of fruit"
                },
                "owner_type": {
                  "type": "integer",
                  "description": "Owner type of fruit, e.g. Movement, Tribe, User"
                },
                "monthly_yield": {
                  "type": "float",
                  "description": "Yield of fruits per month"
                },
                "monthly_decay": {
                  "type": "float",
                  "description": "Rate of decay per month"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        }
      }
    },
    "/api/v1/epicenters/{epicenter_type}/{epicenter_id}/memberships": {
      "get": {
        "summary": "Retrieves list of epicenter memberships",
        "tags": [
          "memberships"
        ],
        "parameters": [
          {
            "name": "epicenter_type",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "epicenter_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "memberships retrieved"
          }
        }
      },
      "post": {
        "summary": "Creates a membership for the corresponding epicenter",
        "tags": [
          "memberships"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "membership",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "decription": "ID of fruit"
                },
                "name": {
                  "type": "string",
                  "description": "Name of fruit"
                },
                "owner_id": {
                  "type": "integer",
                  "description": "Owner id of fruit"
                },
                "owner_type": {
                  "type": "integer",
                  "description": "Owner type of fruit, e.g. Movement, Tribe, User"
                },
                "monthly_yield": {
                  "type": "float",
                  "description": "Yield of memberships per month"
                },
                "monthly_decay": {
                  "type": "float",
                  "description": "Rate of decay per month"
                }
              },
              "required": [
                "name",
                "monthly_decay"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "membership created"
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/api/v1/epicenters/{epicenter_type}/{epicenter_id}/memberships/{membership_id}/enrol/{applicant_type}/{applicant_id}": {
      "post": {
        "summary": "Creates a membership for the corresponding membership and applicant",
        "tags": [
          "memberships"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "membership created"
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "Retrieves list of users",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "users retrieved"
          }
        }
      },
      "post": {
        "summary": "Creates an user",
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "slug": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created"
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "put": {
        "summary": "Updates an user by ID",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "slug": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user updated"
          }
        }
      },
      "get": {
        "summary": "Retrieves an user by ID",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "slug": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    }
  }
}